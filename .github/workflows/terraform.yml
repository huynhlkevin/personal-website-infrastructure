name: "Terraform"

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init (Development)
        id: init_development
        if: github.event_name == 'pull_request'
        run: terraform init
        env:
          TF_WORKSPACE: ${{ vars.TF_DEVELOPMENT_WORKSPACE }}
      
      - name: Terraform Init (Production)
        id: init_production
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform init
        env:
          TF_WORKSPACE: ${{ vars.TF_PRODUCTION_WORKSPACE }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply (Development)
        id: apply_development
        if: github.event_name == 'pull_request'
        run: terraform apply -auto-approve -input=false
        env:
          TF_WORKSPACE: ${{ vars.TF_DEVELOPMENT_WORKSPACE }}

      - name: Terraform Output (Development)
        id: output_development
        if: github.event_name == 'pull_request'
        run: terraform output -json
        env:
          TF_WORKSPACE: ${{ vars.TF_DEVELOPMENT_WORKSPACE }}

      - name: Terraform Apply (Production)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          TF_WORKSPACE: ${{ vars.TF_PRODUCTION_WORKSPACE }}